name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run doctests
      run: cargo test --doc

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build:
    name: Build Binaries
    needs: [test, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: mwb-linux-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact: mwb-linux-musl-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: mwb-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: mwb-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: mwb-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/mwb

    - name: Copy binary (Unix)
      if: runner.os != 'Windows'
      run: cp target/${{ matrix.target }}/release/mwb ${{ matrix.artifact }}

    - name: Copy binary (Windows)
      if: runner.os == 'Windows'
      run: copy target/${{ matrix.target }}/release/mwb.exe ${{ matrix.artifact }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
        retention-days: 30

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -la

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # Generate changelog between tags
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits between tags and format them
        git log --pretty=format:"- %s (@%an)" ${PREV_TAG}..HEAD --grep="^feat\|^fix\|^docs\|^style\|^refactor\|^test\|^chore" >> CHANGELOG.md
        
        # If no conventional commits found, list all commits
        if [ ! -s CHANGELOG.md ] || [ $(wc -l < CHANGELOG.md) -le 2 ]; then
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG.md
        fi
        
        # Add contributors
        echo "" >> CHANGELOG.md
        echo "## Contributors" >> CHANGELOG.md
        git log --pretty=format:"- @%an" ${PREV_TAG}..HEAD | sort | uniq >> CHANGELOG.md
        
        # Set output for use in release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create checksums
      run: |
        cd mwb-linux-x64 && sha256sum mwb-linux-x64 > ../mwb-linux-x64.sha256
        cd ../mwb-linux-musl-x64 && sha256sum mwb-linux-musl-x64 > ../mwb-linux-musl-x64.sha256
        cd ../mwb-windows-x64.exe && sha256sum mwb-windows-x64.exe > ../mwb-windows-x64.exe.sha256
        cd ../mwb-macos-x64 && sha256sum mwb-macos-x64 > ../mwb-macos-x64.sha256
        cd ../mwb-macos-arm64 && sha256sum mwb-macos-arm64 > ../mwb-macos-arm64.sha256

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          # MediathekViewWeb CLI ${{ github.ref_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Windows
          Download `mwb-windows-x64.exe` and run it directly.
          
          ### Linux
          ```bash
          # Standard glibc version (recommended)
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mwb-linux-x64
          chmod +x mwb-linux-x64
          sudo mv mwb-linux-x64 /usr/local/bin/mwb
          
          # MUSL version (for Alpine Linux or static linking)
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mwb-linux-musl-x64
          chmod +x mwb-linux-musl-x64
          sudo mv mwb-linux-musl-x64 /usr/local/bin/mwb
          ```
          
          ### macOS
          ```bash
          # Intel Macs
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mwb-macos-x64
          chmod +x mwb-macos-x64
          sudo mv mwb-macos-x64 /usr/local/bin/mwb
          
          # Apple Silicon Macs (M1/M2)
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mwb-macos-arm64
          chmod +x mwb-macos-arm64
          sudo mv mwb-macos-arm64 /usr/local/bin/mwb
          ```
          
          ## Verification
          
          Verify your download with the provided checksums:
          ```bash
          sha256sum -c mwb-*.sha256
          ```
          
          ## Usage
          
          ```bash
          # Basic search
          mwb search "documentary"
          
          # VLC playlist with quality selection
          mwb search "documentary" --vlc=h  # HD quality
          mwb search "documentary" -v=l     # Low quality
          mwb search "documentary" -v       # Medium quality (default)
          
          # Export formats
          mwb search "news" --format json
          mwb search "news" --format csv
          ```
          
          For more information, run `mwb search --help` or visit the [repository](https://github.com/${{ github.repository }}).
        files: |
          mwb-linux-x64/mwb-linux-x64
          mwb-linux-musl-x64/mwb-linux-musl-x64
          mwb-windows-x64.exe/mwb-windows-x64.exe
          mwb-macos-x64/mwb-macos-x64
          mwb-macos-arm64/mwb-macos-arm64
          mwb-linux-x64.sha256
          mwb-linux-musl-x64.sha256
          mwb-windows-x64.exe.sha256
          mwb-macos-x64.sha256
          mwb-macos-arm64.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cargo-publish:
    name: Publish to Crates.io
    needs: [release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # Don't fail if version already exists