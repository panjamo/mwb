name: Code Quality

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run code quality checks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-quality-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-quality-

    - name: Check code formatting
      run: |
        if ! cargo fmt --all -- --check; then
          echo "Code formatting issues found. Run 'cargo fmt' to fix them."
          exit 1
        fi

    - name: Run Clippy (strict)
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -A clippy::missing-docs-in-private-items \
          -A clippy::module-name-repetitions

    - name: Check for unused dependencies
      run: |
        cargo install cargo-machete || echo "Failed to install cargo-machete, skipping unused dependency check"
        cargo machete || echo "cargo-machete check failed, but continuing"

    - name: Install cargo-audit
      run: cargo install cargo-audit || echo "Failed to install cargo-audit, skipping security audit"

    - name: Run cargo-audit
      run: cargo audit || echo "Security audit failed, but continuing"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-coverage-

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin || echo "Failed to install cargo-tarpaulin, skipping coverage"

    - name: Run coverage
      run: |
        if command -v cargo-tarpaulin &> /dev/null; then
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 \
            --exclude-files src/main.rs \
            --out xml \
            --output-dir ./coverage || echo "Coverage generation failed"
        else
          echo "cargo-tarpaulin not available, skipping coverage"
          mkdir -p ./coverage
          echo "Coverage not available" > ./coverage/cobertura.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-docs-

    - name: Check documentation
      run: |
        RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --document-private-items --all-features

    - name: Test documentation examples
      run: cargo test --doc --all-features

    - name: Check README examples
      run: |
        # Extract code blocks from README and verify they compile
        if command -v mdbook &> /dev/null; then
          echo "Checking README examples..."
          # This would require setting up mdbook testing
        else
          echo "Skipping README example checks (mdbook not available)"
        fi

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-bench-

    - name: Run benchmarks
      run: |
        # If you have benchmarks, run them here
        # cargo bench --all-features
        echo "No benchmarks configured yet"

    - name: Store benchmark results
      if: github.event_name == 'push'
      run: |
        # Store benchmark results for trend analysis
        mkdir -p benchmark-results
        echo "Placeholder for benchmark results" > benchmark-results/results.txt
        echo "Date: $(date)" >> benchmark-results/results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results/
        retention-days: 30

  cargo-msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-msrv
      run: cargo install cargo-msrv || echo "Failed to install cargo-msrv, skipping MSRV check"

    - name: Verify MSRV
      run: |
        if command -v cargo-msrv &> /dev/null; then
          # Check if the current MSRV in Cargo.toml is accurate
          cargo msrv --output-format json verify || echo "MSRV verification failed"
          
          # Find the actual MSRV
          cargo msrv --output-format json find | tee msrv-results.json || echo "MSRV detection failed"
        else
          echo "cargo-msrv not available, creating empty results"
          echo '{"msrv": "unknown"}' > msrv-results.json
        fi

    - name: Comment MSRV results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const msrvResults = fs.readFileSync('msrv-results.json', 'utf8');
            const results = JSON.parse(msrvResults);
            
            const comment = `
            ## ðŸ¦€ MSRV Check Results
            
            **Minimum Supported Rust Version**: ${results.msrv || 'Not determined'}
            
            This PR has been tested against the minimum supported Rust version.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not parse MSRV results:', error);
          }

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-supply-chain-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-supply-chain-

    - name: Install cargo-geiger
      run: cargo install cargo-geiger || echo "Failed to install cargo-geiger, skipping unsafe code detection"

    - name: Run unsafe code detection
      run: |
        echo "## Unsafe Code Detection" > supply-chain-report.md
        echo "" >> supply-chain-report.md
        if command -v cargo-geiger &> /dev/null; then
          cargo geiger --format GitHubMarkdown >> supply-chain-report.md || echo "cargo-geiger failed, but continuing"
        else
          echo "cargo-geiger not available" >> supply-chain-report.md
        fi

    - name: Install cargo-outdated
      run: cargo install cargo-outdated || echo "Failed to install cargo-outdated, skipping outdated check"

    - name: Check for outdated dependencies
      run: |
        echo "" >> supply-chain-report.md
        echo "## Outdated Dependencies" >> supply-chain-report.md
        echo "" >> supply-chain-report.md
        if command -v cargo-outdated &> /dev/null; then
          cargo outdated --format json > outdated.json || echo '{"dependencies": []}' > outdated.json
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != '{"dependencies": []}' ]; then
            echo "Found outdated dependencies - see artifact for details" >> supply-chain-report.md
          else
            echo "All dependencies are up to date! ðŸŽ‰" >> supply-chain-report.md
          fi
        else
          echo "cargo-outdated not available" >> supply-chain-report.md
          echo '{"dependencies": []}' > outdated.json
        fi

    - name: Upload supply chain report
      uses: actions/upload-artifact@v4
      with:
        name: supply-chain-report-${{ github.sha }}
        path: |
          supply-chain-report.md
          outdated.json
        retention-days: 30